plugins {
    id 'base'
    id 'idea'
    id 'java-library'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
}

// ::: Project metadata :::
group 'org.queryhub'
version '0.1.0'

// Should follow wrapper version shipped into this project
wrapper { gradleVersion = '5.6.2' }

ext.moduleName = '_'

repositories { mavenCentral() }

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junit_version
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junit_version
    testImplementation 'org.junit.platform:junit-platform-suite-api:' + junit_platform_version
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:' + junit_platform_version
}

defaultTasks 'clean', 'cleanIdea', 'cleanTest', 'idea', 'build'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

// Testing

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()
    filter { exclude '**/module-info.class' }
}

jacocoTestReport {
    reports {
        xml.enabled Boolean.TRUE
        html.enabled Boolean.TRUE
        csv.enabled Boolean.TRUE
    }
}

check.dependsOn jacocoTestReport

// Publishing

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Main-Class': 'org.queryhub.Query'
        attributes 'Automatic-Module-Name': moduleName
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}
