plugins {
    id 'base'
    id 'idea'
    id 'java-library'

    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'com.gradle.build-scan' version '2.4.2'
}

// ::: Project metadata :::
group 'org.queryhub'
version '0.1.0'

// Should follow wrapper version shipped into this project
wrapper { gradleVersion = '5.6.3' }

ext {
    module_core = 'queryhub.core'
    module_test = 'queryhub.test'

    junit_version = '5.5.2+'
    junit_platform_version = '1.5.2+'
}

repositories { mavenCentral() }

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junit_version
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junit_version
    testImplementation 'org.junit.platform:junit-platform-suite-api:' + junit_platform_version
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:' + junit_platform_version
}

defaultTasks 'clean', 'cleanIdea', 'cleanTest', 'idea', 'build'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava {
    inputs.property('moduleName', module_core)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

// Testing

compileTestJava {
    inputs.property('moduleName', module_test)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$module_test=org.junit.jupiter.api",
                '--patch-module', "$module_test=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()
    filter { exclude '**/module-info.class' }
}

jacocoTestReport {
    reports {
        xml.enabled Boolean.TRUE
        html.enabled Boolean.TRUE
        csv.enabled Boolean.TRUE
    }
}

check.dependsOn jacocoTestReport

// Publishing

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.organization', 'queryhub'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.login', 'fe78c047c663a9859f71f618f499434eeb4d901a'
    }
}

jar {
    inputs.property('moduleName', module_test)
    manifest {
        attributes 'Main-Class': 'org.queryhub.Query'
        attributes 'Automatic-Module-Name': module_core
    }
}

/**
 task sourceJar(type: Jar) {classifier 'sources'
 from sourceSets.main.allJava}task javadocJar(type: Jar, dependsOn: javadoc) {classifier 'javadoc'
 from javadoc.destinationDir}artifacts {archives jar
 archives sourceJar
 archives javadocJar}*/
