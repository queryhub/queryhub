plugins {
    id 'base'
    id 'idea'
    id 'java-library'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

// ::: Project metadata :::
group 'org.queryhub'
version '0.1.0'

// Should follow wrapper version shipped into this project
wrapper { gradleVersion = '5.6.2' }

ext.moduleName = '_'

repositories { mavenCentral() }

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junit_version
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junit_version
    testImplementation 'org.junit.platform:junit-platform-suite-api:' + junit_platform_version
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:' + junit_platform_version
}

defaultTasks 'clean', 'cleanIdea', 'idea', 'build'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

// Testing

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

// https://github.com/codecov/example-gradle#-do-you-support-multi-module-projects
task codeCoverageReport(type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each { sourceSets it.sourceSets.main }

    reports {
        xml.enabled Boolean.TRUE
        xml.destination = file("${buildDir}/reports/jacoco/report.xml")
        html.enabled Boolean.FALSE
        csv.enabled Boolean.FALSE
    }
}

codeCoverageReport.dependsOn test

test {
    useJUnitPlatform()
    filter { exclude '**/module-info.class' }
}

// Publishing

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    manifest {
        attributes archiveClassifier: 'sources'
    }
}

task javadocJar(type: Jar) {
    from javadoc
    manifest {
        attributes archiveClassifier: 'javadoc'
    }
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Main-Class': 'org.queryhub.Query'
        attributes 'Automatic-Module-Name': moduleName
    }
}

// https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                scm {
                    connection = 'scm:git:git://github.com/queryhub/queryhub.git'
                    developerConnection = 'scm:git:ssh://github.com/queryhub/queryhub.git'
                    url = 'http://queryhub.github.io'
                }
            }
        }
    }
}

signing { sign publishing.publications.mavenJava }

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', Boolean.TRUE)
    }
}